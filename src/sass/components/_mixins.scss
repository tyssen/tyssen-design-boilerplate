//
// Functions
//

@function emCalc($pxWidth) {
	@return $pxWidth / $base-font-size * 1em;
}

@function remCalc($pxWidth) {
	@return $pxWidth / $base-font-size * 1rem;
}

@function em($target-size, $context-size: $base-font-size) {
	@if $target-size == 0 { @return 0 }
	@return $target-size / $context-size + 0em;
}

//
// Mixins
//

@mixin font-size($font-size: 16){
	font-size: #{$font-size / 16}em;
	// font-size: #{$font-size / 10}rem;
}


// We use this to create equalateral triangles

@mixin css-triangle($triangle-size, $triangle-color, $triangle-direction) {
	content: "";
	display: block;
	width: 0;
	height: 0;
	border: solid $triangle-size;
	@if ($triangle-direction == top) {
		border-color: $triangle-color transparent transparent transparent;
	}
	@if ($triangle-direction == bottom) {
		border-color: transparent transparent $triangle-color transparent;
	}
	@if ($triangle-direction == left) {
		border-color: transparent transparent transparent $triangle-color;
	}
	@if ($triangle-direction == right) {
		border-color: transparent $triangle-color transparent transparent;
	}
}

@mixin triangle($direction, $size: 6px, $color: #222){
	content: '';
	display: block;
	position: absolute;
	height: 0; width: 0;
	@if ($direction == 'up'){
		border-bottom: $size solid $color;
		border-left: 1/2*$size solid transparent;
		border-right: 1/2*$size solid transparent;
	}
	@else if ($direction == 'down'){
		border-top: $size solid $color;
		border-left: 1/2*$size solid transparent;
		border-right: 1/2*$size solid transparent;
	}
	@else if ($direction == 'left'){
		border-top: 1/2*$size solid transparent;
		border-bottom: 1/2*$size solid transparent;
		border-right: $size solid $color;
	}
	@else if ($direction == 'right'){
		border-top: 1/2*$size solid transparent;
		border-bottom: 1/2*$size solid transparent;
		border-left: $size solid $color;
	}
}

// We use this to do clear floats
@mixin clearfix() {
	*zoom:1;
	&:before, &:after { content: " "; display: table; }
	&:after { clear: both; }
}

%pie { behavior: url("/assets/js/PIE.htc"); }

@mixin mq($point, $query1: min, $query2: width, $IE: false) {
	@if $IE == true{
		.oldie & {
			@content;
		}
		@media screen and (#{$query1}-#{$query2}: emCalc($point)) {
			@content;
		}
	}

	@else {
		@media screen and (#{$query1}-#{$query2}: emCalc($point)) {
			@content;
		}
	}
}

@mixin nudge($distance) {
	position: relative;
	top: $distance;
}

@mixin animation($name, $duration: 1000ms, $iterations: infinite, $timing-function: ease, $delay: 0ms) {
	// There is a FF bug that requires all time values to have units, even 0 !!!!!!
	-webkit-animation: $name $duration $iterations $timing-function $delay;
	-moz-animation: $name $duration $iterations $timing-function $delay;
	-o-animation: $name $duration $iterations $timing-function $delay;
	animation: $name $duration $iterations $timing-function $delay;
}

@mixin truncate($width: 100%) {
	width: $width;
	max-width: 100%;
	display: block;
	overflow: hidden;
	white-space: nowrap;
	text-overflow: ellipsis;
}

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

@mixin gv($firstColor: #FFF, $secondColor: #DDD) {
	background-color: $firstColor;
	background-image: linear-gradient(to bottom, $firstColor, $secondColor);
	 -pie-background: linear-gradient($firstColor, $secondColor);
	@extend %pie;
}

@mixin gh($firstColor: #FFF, $secondColor: #DDD) {
	background-color: $firstColor;
	background-image: linear-gradient(to right, $firstColor, $secondColor);
	 -pie-background: linear-gradient(left, $firstColor, $secondColor);
	@extend %pie;
}

@mixin rgba($color, $alpha) {
	background-color: rgba($color, $alpha);
	 -pie-background: rgba($color, $alpha);
	@extend %pie;
}